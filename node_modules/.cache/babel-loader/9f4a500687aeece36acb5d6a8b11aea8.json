{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  counter: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      const newState = Object.assign({}, state);\n      newState.counter = state.counter + 1;\n      return newState;\n\n    case actionTypes.DECREMENT:\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    case actionTypes.ADD:\n      return { ...state,\n        counter: state.counter + action.val\n      };\n\n    case actionTypes.SUB:\n      return updateObject(state, {\n        counter: state.counter - action.val\n      });\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/yokohamakaito/Desktop/Reduxlearning/src/store/reducers/counter.js"],"names":["actionTypes","updateObject","initialState","counter","reducer","state","action","type","INCREMENT","newState","Object","assign","DECREMENT","ADD","val","SUB"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC;AADS,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAEH,YAAR,EAAqBI,MAArB,KAA+B;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,WAAW,CAACQ,SAAjB;AACQ,YAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,CAAjB;AACAI,MAAAA,QAAQ,CAACN,OAAT,GAAiBE,KAAK,CAACF,OAAN,GAAe,CAAhC;AAEA,aAAOM,QAAP;;AAGR,SAAKT,WAAW,CAACY,SAAjB;AACQ,aAAM,EAEF,GAAGP,KAFD;AAGFF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,GAAgB;AAHtB,OAAN;;AAKR,SAAKH,WAAW,CAACa,GAAjB;AACQ,aAAM,EACF,GAAGR,KADD;AAEFF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACQ;AAF7B,OAAN;;AAKR,SAAKd,WAAW,CAACe,GAAjB;AACQ,aAAOd,YAAY,CAACI,KAAD,EAAO;AAACF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,GAAgBG,MAAM,CAACQ;AAAhC,OAAP,CAAnB;AArBZ;;AAuBA,SAAOT,KAAP;AACH,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'\nimport {updateObject} from '../utility'\nconst initialState = {\n    counter:0,\n}\n\nconst reducer = (state= initialState,action) =>{\n    switch(action.type){\n        case actionTypes.INCREMENT:\n                const newState = Object.assign({}, state);\n                newState.counter=state.counter +1\n                         \n                return newState\n          \n             \n        case actionTypes.DECREMENT:\n                return{\n                    \n                    ...state,\n                    counter:state.counter - 1\n                }\n        case actionTypes.ADD:\n                return{\n                    ...state,\n                    counter:state.counter + action.val\n                    \n                }\n        case actionTypes.SUB:\n                return updateObject(state,{counter:state.counter - action.val});\n    }\n    return state;\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}